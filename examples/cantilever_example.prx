<?xml version='1.0' encoding='UTF-8'?>
<prx:processinginstructions xmlns="http://limatix.org/processtrak/processinginstructions" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://limatix.org/datacollect"  xmlns:dcv="http://limatix.org/dcvalue" xmlns:prx="http://limatix.org/processtrak/processinginstructions">
  <!-- This file specifies the multi-step processing instructions
  for a VibroSim simulation. In this case we are simulating broadband 
  coupled linear excitation. -->
       
  <prx:inputfiles>
    <!-- The <inputfile> tag is where you refer to the "experiment log"
    with one or more sets of simulation parameters -->
    <prx:inputfile xlink:href="cantilever_example.xlg"/>
  </prx:inputfiles>

  <prx:elementmatch>dc:measurement</prx:elementmatch>

  <prx:step name="dummyoutput" descr="Create dummy heating output needed by COMSOL model">
    <prx:script name="vibrocomsol_createdummyoutput.py"/>
  </prx:step>

  <!-- Build the COMSOL model -->
  <prx:step name="buildmodel" descr="Construct COMSOL model">
    <prx:script xlink:href="cantilever_example_comsol.m"/>
  </prx:step>


  <!-- Run the modal analysis -->
  <prx:step name="runmodal">
    <prx:script name="vibrocomsol_runmodal_comsol.m"/>
  </prx:step>

  <prx:step name="synthetic_spectrum">
    <prx:script name="vibrosim_synthetic_spectrum.py"/>
  </prx:step>

  <!-- Typically you will run the above steps, looking at the output of
       synthetic_spectrum (either as an image in the output directory or
       by running the last step with the -i (interactive) option. 
       Compare the synthetic spectrum to a known impulse response
       spectrum and adjust the dc:spcrayleighdamping_alpha and 
       dc:spcrayleighdamping_beta parameters in the experiment log so 
       that the damping (resonant pulse widths) matches the physical 
       system. Increasing dc:spcrayleighdamping_alpha will increase
       damping at low frequencies. Increasing dc:spcrayleighdamping_beta
       will increase damping at high frequencies -->

  <prx:step name="optimize_freqbands">
    <prx:script name="vibrosim_optimize_freqbands.py"/>
  </prx:step>

  <!-- After running optimize_freqbands, look at the total number of steps. 
  If this is much beyond 10000, then the multisweep segment analysis may take
  prohibitively long. You can reduce the number of steps by increasing one or 
  both of the damping parameters. -->

  <prx:step name="set_freqbands">
    <prx:script name="vibrocomsol_set_freqbands_comsol.m"/>
  </prx:step>

  <prx:step name="multisweep_seg1_analysis">
    <!-- Run the various MultiSweep segments and
    extract/generate the response output -->
    <prx:script name="vibrocomsol_multisweep_seg_analysis_comsol.m"/>
    <prx:param name="segnum">1</prx:param>
  </prx:step>

  <prx:step name="multisweep_seg2_analysis">
    <!-- Run the various MultiSweep segments and
    extract/generate the response output -->
    <prx:script name="vibrocomsol_multisweep_seg_analysis_comsol.m"/>
    <prx:param name="segnum">2</prx:param>
  </prx:step>

  <prx:step name="multisweep_seg3_analysis">
    <!-- Run the various MultiSweep segments and
    extract/generate the response output -->
    <prx:script name="vibrocomsol_multisweep_seg_analysis_comsol.m"/>
    <prx:param name="segnum">3</prx:param>
  </prx:step>

  <prx:step name="multisweep_seg4_analysis">
    <!-- Run the various MultiSweep segments and
    extract/generate the response output -->
    <prx:script name="vibrocomsol_multisweep_seg_analysis_comsol.m"/>
    <prx:param name="segnum">4</prx:param>
  </prx:step>
  
  <prx:step name="process_multisweep">
    <!-- process the freqband_analysis output
    To create a time-domain waveform -->
    <prx:script name="vibrosim_process_multisweep.py"/>
  </prx:step>

  <prx:step name="simulate_welder">
    <prx:param name="dc_max_t" dcv:units="s">0.02</prx:param>
    <prx:param name="dc_mass_of_welder_and_slider" dcv:units="kg">2.0</prx:param>
    <prx:param name="dc_pneumatic_force" dcv:units="N">100</prx:param>
    <prx:param name="dc_welder_elec_ampl">1e8</prx:param>
    <prx:param name="dc_welder_spring_constant" dcv:units="N/m">5000</prx:param>
    <prx:param name="dc_R_contact" dcv:units="m">25.4e-3</prx:param>
    <prx:param name="dc_welder_elec_freq" dcv:units="Hz">19890</prx:param>
    <prx:param name="dc_gpu_device_priority_list">[('NVIDIA CUDA','Quadro GP100'), ('Intel(R) OpenCL HD Graphics','Intel(R) Gen9 HD Graphics NEO'), ('Portable Computing Language', 'pthread-AMD EPYC 7351P 16-Core Processor')]</prx:param>
    
    <prx:script name="vibrosim_simulate_welder.py"/>
  </prx:step>

  <prx:step name="plot_welder_motion">
    <prx:script name="vibrosim_plot_welder_motion.py"/>
  </prx:step>

  <prx:step name="calc_heating">
    <prx:script name="vibrosim_weldercalc_heating.py"/>
  </prx:step>
  

  <!-- Finally we run the heatflow analysis -->
  <prx:step name="heatflow_analysis">
    <prx:script name="vibrocomsol_heatflow_analysis_comsol.m"/>
  </prx:step>


</prx:processinginstructions>

